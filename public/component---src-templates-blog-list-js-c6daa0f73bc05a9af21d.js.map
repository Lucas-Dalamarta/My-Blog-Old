{"version":3,"sources":["webpack:///./src/components/PostItem/styled.js","webpack:///./src/components/PostItem/index.js","webpack:///./src/components/Pagination/styled.js","webpack:///./src/components/Pagination/index.js","webpack:///./src/components/ListWrapper/styled.js","webpack:///./src/templates/blog-list.js"],"names":["PostItemLink","styled","AniLink","PostItemWrapper","section","media","lessThan","PostItemTag","div","props","background","PostItemInfo","PostItemDate","time","PostItemTitle","h1","PostItemDescription","p","PostItem","slug","category","date","timeToRead","title","description","cover","direction","bg","getThemeColor","duration","to","PaginationWrapper","Pagination","isFirst","isLast","currentPage","numPages","prevPage","nextPage","ListWrapper","query","BlogList","postList","data","allMarkdownRemark","edges","pageContext","Layout","map","node","frontmatter","fields"],"mappings":"mpBAKO,IAAMA,EAAeC,YAAOC,KAAV,2EAAGD,CAAH,sKAaZE,EAAkBF,IAAOG,QAAV,8EAAGH,CAAH,oMAYxBI,IAAMC,SAAS,QAAfD,CAZwB,MAmBfE,EAAcN,IAAOO,IAAV,0EAAGP,CAAH,wOAER,SAAAQ,GAAK,OACjBA,EAAMC,WAAaD,EAAMC,WAAa,qBAUtCL,IAAMC,SAAS,QAAfD,CAboB,MA0BXM,EAAeV,IAAOO,IAAV,2EAAGP,CAAH,8DAIrBI,IAAMC,SAAS,QAAfD,CAJqB,MASZO,EAAeX,IAAOY,KAAV,2EAAGZ,CAAH,uBAIZa,EAAgBb,IAAOc,GAAV,4EAAGd,CAAH,2GAUbe,EAAsBf,IAAOgB,EAAV,kFAAGhB,CAAH,uDCxCjBiB,IAvCE,SAAC,GAAD,IACfC,EADe,EACfA,KACAT,EAFe,EAEfA,WACAU,EAHe,EAGfA,SACAC,EAJe,EAIfA,KACAC,EALe,EAKfA,WACAC,EANe,EAMfA,MACAC,EAPe,EAOfA,YAPe,OASf,kBAAC,EAAD,CACEC,OAAK,EACLC,UAAU,QACVC,GAAIC,cACJC,SAAU,GACVC,GAAIX,GAEJ,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAeT,WAAYA,GAAaU,GACxC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACGC,EADH,MACYC,EADZ,mBAGA,kBAAC,EAAD,KAAkBC,GAClB,kBAAC,EAAD,KAAwBC,Q,+VC3BzB,IAAMO,EAAoB9B,IAAOG,QAAV,4EAAGH,CAAH,mPAO1BI,IAAMC,SAAS,QAAfD,CAP0B,MCmDf2B,EA9CI,SAAC,GAAD,IACjBC,EADiB,EACjBA,QACAC,EAFiB,EAEjBA,OACAC,EAHiB,EAGjBA,YACAC,EAJiB,EAIjBA,SACAC,EALiB,EAKjBA,SACAC,EANiB,EAMjBA,SANiB,OAQjB,kBAAC,EAAD,MACIL,GACA,kBAAC,IAAD,CACER,OAAK,EACLC,UAAU,OACVC,GAAIC,cACJC,SAAU,GACVC,GAAIO,GALN,qBAUF,2BACGF,EADH,OACoBC,IAElBF,GACA,kBAAC,IAAD,CACET,OAAK,EACLC,UAAU,QACVC,GAAIC,cACJC,SAAU,GACVC,GAAIQ,GALN,sBC9BOC,EAActC,IAAOG,QAAV,sEAAGH,CAAH,6LCqDXuC,EAAK,aA0BHC,UAvEE,SAAAhC,GACf,IAAMiC,EAAWjC,EAAMkC,KAAKC,kBAAkBC,MADtB,EAGUpC,EAAMqC,YAAhCX,EAHgB,EAGhBA,YAAaC,EAHG,EAGHA,SACfH,EAA0B,IAAhBE,EACVD,EAASC,IAAgBC,EACzBC,EAAWF,EAAc,GAAM,EAAI,IAAxB,UAAuCA,EAAc,GAChEG,EAAQ,UAAYH,EAAc,GAExC,OACE,kBAACY,EAAA,EAAD,KACE,kBAAC,IAAD,CAAKxB,MAAM,SACX,kBAAC,EAAD,KACGmB,EAASM,KACR,oBACEC,KADF,IAEIC,YAAexC,EAFnB,EAEmBA,WAAYU,EAF/B,EAE+BA,SAAUC,EAFzC,EAEyCA,KAAMG,EAF/C,EAE+CA,YAAaD,EAF5D,EAE4DA,MACxDD,EAHJ,EAGIA,WACUH,EAJd,EAIIgC,OAAUhC,KAJd,OAOE,kBAACD,EAAA,EAAD,CACEC,KAAMA,EACNT,WAAYA,EACZU,SAAUA,EACVC,KAAMA,EACNC,WAAYA,EACZC,MAAOA,EACPC,YAAaA,QAKrB,kBAAC,EAAD,CACES,QAASA,EACTC,OAAQA,EACRC,YAAaA,EACbC,SAAUA,EACVC,SAAUA,EACVC,SAAUA","file":"component---src-templates-blog-list-js-c6daa0f73bc05a9af21d.js","sourcesContent":["import styled from \"styled-components\"\r\nimport media from \"styled-media-query\"\r\n\r\nimport AniLink from \"gatsby-plugin-transition-link/AniLink\"\r\n\r\nexport const PostItemLink = styled(AniLink)`\r\n  color: var(--texts);\r\n  display: flex;\r\n  text-decoration: none;\r\n  transition: background 0.5s;\r\n  body#grid & {\r\n    background-color: var(--background);\r\n  }\r\n  &:hover {\r\n    color: var(--highlight);\r\n  }\r\n`\r\n\r\nexport const PostItemWrapper = styled.section`\r\n  align-items: center;\r\n  border-bottom: 1px solid var(--borders);\r\n  display: flex;\r\n  padding: 2rem 3rem;\r\n  width: 100%;\r\n  body#grid & {\r\n    border: none;\r\n    padding: 2rem 1rem;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n  }\r\n  ${media.lessThan(\"large\")`\r\n    align-items: flex-start;\r\n    flex-direction: column;\r\n    padding: 2rem 1rem;\r\n  `}\r\n`\r\n\r\nexport const PostItemTag = styled.div`\r\n  align-items: center;\r\n  background: ${props =>\r\n    props.background ? props.background : \"var(--highlight)\"};\r\n  border-radius: 50%;\r\n  color: #fff;\r\n  display: flex;\r\n  font-size: 1.3rem;\r\n  font-weight: 700;\r\n  justify-content: center;\r\n  min-height: 90px;\r\n  min-width: 90px;\r\n  text-transform: uppercase;\r\n  ${media.lessThan(\"large\")`\r\n    border-radius: 0;\r\n    font-size: 1rem;\r\n    min-height: auto;\r\n    min-width: auto;\r\n    padding: .2rem .5rem;\r\n    margin-bottom: .7rem;\r\n  `}\r\n  body#grid & {\r\n    margin-bottom: 1.5rem;\r\n  }\r\n`\r\n\r\nexport const PostItemInfo = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-left: 1.5rem;\r\n  ${media.lessThan(\"large\")`\r\n    margin: 0;\r\n  `}\r\n`\r\n\r\nexport const PostItemDate = styled.time`\r\n  font-size: 0.9rem;\r\n`\r\n\r\nexport const PostItemTitle = styled.h1`\r\n  font-size: 1.6rem;\r\n  font-weight: 700;\r\n  margin: 0.2rem 0 0.5rem;\r\n  body#grid & {\r\n    line-height: 1.1;\r\n    margin: 0.8rem 0;\r\n  }\r\n`\r\n\r\nexport const PostItemDescription = styled.p`\r\n  font-size: 1.2rem;\r\n  font-weight: 300;\r\n  line-height: 1.2;\r\n`\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nimport getThemeColor from \"../../utils/getThemeColor\"\r\n\r\nimport * as S from \"./styled\"\r\n\r\nconst PostItem = ({\r\n  slug,\r\n  background,\r\n  category,\r\n  date,\r\n  timeToRead,\r\n  title,\r\n  description,\r\n}) => (\r\n  <S.PostItemLink\r\n    cover\r\n    direction=\"right\"\r\n    bg={getThemeColor()}\r\n    duration={0.5}\r\n    to={slug}\r\n  >\r\n    <S.PostItemWrapper>\r\n      <S.PostItemTag background={background}>{category}</S.PostItemTag>\r\n      <S.PostItemInfo>\r\n        <S.PostItemDate>\r\n          {date} - {timeToRead} min de leitura\r\n        </S.PostItemDate>\r\n        <S.PostItemTitle>{title}</S.PostItemTitle>\r\n        <S.PostItemDescription>{description}</S.PostItemDescription>\r\n      </S.PostItemInfo>\r\n    </S.PostItemWrapper>\r\n  </S.PostItemLink>\r\n)\r\n\r\nPostItem.propTypes = {\r\n  slug: PropTypes.string.isRequired,\r\n  background: PropTypes.string,\r\n  category: PropTypes.string.isRequired,\r\n  date: PropTypes.string.isRequired,\r\n  timeToRead: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  description: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default PostItem\r\n","import styled from \"styled-components\"\r\nimport media from \"styled-media-query\"\r\n\r\nexport const PaginationWrapper = styled.section`\r\n  align-items: center;\r\n  border-top: 1px solid var(--borders);\r\n  color: var(--texts);\r\n  display: flex;\r\n  padding: 1.5rem 3rem;\r\n  justify-content: space-between;\r\n  ${media.lessThan(\"large\")`\r\n    font-size: .8rem;\r\n    padding: 1rem;\r\n  `}\r\n  a {\r\n    color: var(--texts);\r\n    text-decoration: none;\r\n    transition: color 0.5s;\r\n    &:hover {\r\n      color: var(--highlight);\r\n    }\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport propTypes from \"prop-types\"\r\nimport AniLink from \"gatsby-plugin-transition-link/AniLink\"\r\n\r\nimport getThemeColor from \"../../utils/getThemeColor\"\r\n\r\nimport * as S from \"./styled\"\r\n\r\nconst Pagination = ({\r\n  isFirst,\r\n  isLast,\r\n  currentPage,\r\n  numPages,\r\n  prevPage,\r\n  nextPage,\r\n}) => (\r\n  <S.PaginationWrapper>\r\n    {!isFirst && (\r\n      <AniLink\r\n        cover\r\n        direction=\"left\"\r\n        bg={getThemeColor()}\r\n        duration={0.5}\r\n        to={prevPage}\r\n      >\r\n        ← página anterior\r\n      </AniLink>\r\n    )}\r\n    <p>\r\n      {currentPage} de {numPages}\r\n    </p>\r\n    {!isLast && (\r\n      <AniLink\r\n        cover\r\n        direction=\"right\"\r\n        bg={getThemeColor()}\r\n        duration={0.5}\r\n        to={nextPage}\r\n      >\r\n        proxima página →\r\n      </AniLink>\r\n    )}\r\n  </S.PaginationWrapper>\r\n)\r\n\r\nPagination.propTypes = {\r\n  isFirst: propTypes.bool.isRequired,\r\n  isLast: propTypes.bool.isRequired,\r\n  currentPage: propTypes.number.isRequired,\r\n  numPages: propTypes.number.isRequired,\r\n  prevPage: propTypes.string,\r\n  nextPage: propTypes.string,\r\n}\r\n\r\nexport default Pagination\r\n","import styled from \"styled-components\"\r\n\r\nexport const ListWrapper = styled.section`\r\n  body#grid & {\r\n    background-color: var(--borders);\r\n    border-bottom: 1px solid var(--borders);\r\n    display: grid;\r\n    grid-area: posts;\r\n    grid-gap: 1px;\r\n    grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/Layout\"\r\nimport SEO from \"../components/seo\"\r\nimport PostItem from \"../components/PostItem\"\r\nimport Pagination from \"../components/Pagination\"\r\n\r\nimport * as S from \"../components/ListWrapper/styled\"\r\n\r\nconst BlogList = props => {\r\n  const postList = props.data.allMarkdownRemark.edges\r\n\r\n  const { currentPage, numPages } = props.pageContext\r\n  const isFirst = currentPage === 1\r\n  const isLast = currentPage === numPages\r\n  const prevPage = currentPage - 1 === 1 ? \"/\" : `/page/${currentPage - 1}`\r\n  const nextPage = `/page/${currentPage + 1}`\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"Home\" />\r\n      <S.ListWrapper>\r\n        {postList.map(\r\n          ({\r\n            node: {\r\n              frontmatter: { background, category, date, description, title },\r\n              timeToRead,\r\n              fields: { slug },\r\n            },\r\n          }) => (\r\n            <PostItem\r\n              slug={slug}\r\n              background={background}\r\n              category={category}\r\n              date={date}\r\n              timeToRead={timeToRead}\r\n              title={title}\r\n              description={description}\r\n            />\r\n          )\r\n        )}\r\n      </S.ListWrapper>\r\n      <Pagination\r\n        isFirst={isFirst}\r\n        isLast={isLast}\r\n        currentPage={currentPage}\r\n        numPages={numPages}\r\n        prevPage={prevPage}\r\n        nextPage={nextPage}\r\n      />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query PostList($skip: Int!, $limit: Int!) {\r\n    allMarkdownRemark(\r\n      sort: { fields: frontmatter___date, order: DESC }\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            background\r\n            category\r\n            date(locale: \"pt-br\", formatString: \"DD [de] MMMM [de] YYYY\")\r\n            description\r\n            title\r\n          }\r\n          timeToRead\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default BlogList\r\n"],"sourceRoot":""}